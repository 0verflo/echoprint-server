Server components for Echoprint.

This includes a demo non-production API layer to test with.

Non-included requirements for the demo:

- web.py
- simplejson (if < 2.6)

Non-included requirements for the server:

- java 1.6


1. Start the server like this (change your home directory to where you have echoprint-server)

java -Dsolr.solr.home=/Users/bwhitman/outside/echoprint-server/solr/solr/solr/ -Djava.awt.headless=true -jar start.jar

2. Run the api.py webserver as a test

cd API
python api.py 8080

3. Ingest codes with http://localhost:8080/ingest:

POST

track_id : if you want your own track_ids. If you don't give one we'll generate one.
fp_code : packed code from codegen

4. Query with http://localhost:8080/query?fp_code=XXX

POST or GET

fp_code : packed code from codegen


NOTES

- This version both indexes and stores FP data in solr. In practice it may be better to use a keyvalue or other fast random access 
store for large catalogs. If you do this, change schema.xml to not store the "fp" field (keep it indexed.) Also override fp.py's 
fp_code_for_track_id method.

- You can run the FP in "local" mode which uses a python dict to store codes. You can store and index about 100K tracks in 1GB or so in practice
using this mode. Only useful for small scale testing. Each fp.py method takes an optional "local" kwarg.





